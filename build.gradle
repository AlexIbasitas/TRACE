plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.17.2'
}

group = 'com.triagemate'
version = '1.0-SNAPSHOT'

// ============================================================================
// REPOSITORIES
// ============================================================================

repositories {
    mavenCentral()
}

// ============================================================================
// DEPENDENCIES
// ============================================================================

dependencies {
    // Test Framework Dependencies (JetBrains recommended)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    
    // JUnit4 runtime dependency (required for IntelliJ Platform compatibility)
    testRuntimeOnly 'junit:junit:4.13.2'
    
    // Assertions
    testImplementation 'org.assertj:assertj-core:3.25.3'
}

// ============================================================================
// INTELLIJ PLATFORM CONFIGURATION
// ============================================================================

intellij {
    version = '2024.1'
    type = 'IC' // IntelliJ IDEA Community Edition
    plugins = ['java']
    instrumentCode = true // Required for proper IntelliJ Platform testing
}

patchPluginXml {
    sinceBuild = '241'
    untilBuild = '241.*'
}

// ============================================================================
// JAVA CONFIGURATION
// ============================================================================

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// ============================================================================
// CLEANUP TASKS (JetBrains Best Practice)
// ============================================================================

/**
 * Clean IntelliJ test temp directories to prevent "file name too long" errors.
 * This is a JetBrains recommended practice for avoiding test infrastructure issues.
 */
task cleanTestTempDirs {
    description = 'Clean IntelliJ test temp directories to prevent file name too long errors'
    group = 'verification'
    
    doLast {
        def tempDir = System.getProperty('java.io.tmpdir')
        if (tempDir) {
            def testTempDirs = new File(tempDir).listFiles(new java.io.FileFilter() {
                boolean accept(File file) {
                    return file.isDirectory() && file.name.startsWith('unitTest__')
                }
            })
            
            if (testTempDirs) {
                logger.lifecycle("Cleaning ${testTempDirs.length} test temp directories...")
                testTempDirs.each { dir ->
                    try {
                        dir.deleteDir()
                        logger.debug("Cleaned temp directory: ${dir.name}")
                    } catch (Exception e) {
                        logger.warn("Failed to clean temp directory ${dir.name}: ${e.message}")
                    }
                }
            } else {
                logger.lifecycle("No test temp directories found to clean")
            }
        }
    }
}

/**
 * Clean build and temp directories - comprehensive cleanup.
 * Run this before running integration tests to prevent temp directory issues.
 */
task cleanAll {
    description = 'Clean build and temp directories to prevent test infrastructure issues'
    group = 'verification'
    dependsOn clean, cleanTestTempDirs
    
    doLast {
        logger.lifecycle("Comprehensive cleanup completed. Ready for fresh test run.")
    }
}

// ============================================================================
// TEST CONFIGURATION
// ============================================================================

/**
 * Common test configuration shared across all test tasks.
 * Includes JetBrains recommended system properties and logging configuration.
 */
def configureTestTask(Test task) {
    task.useJUnitPlatform()
    
    // JetBrains recommended system properties
    task.systemProperty 'idea.log.debug.categories', 'com.triagemate'
    task.systemProperty 'idea.split.test.logs', 'true'
    
    // Additional properties to help with temporary directory issues
    task.systemProperty 'java.io.tmpdir', System.getProperty('java.io.tmpdir')
    
    // Force separate JVM processes for better isolation (JetBrains recommendation)
    task.forkEvery = 1
    task.maxParallelForks = 1
    
    // Use shorter temp directory paths to prevent "file name too long" errors
    task.systemProperty 'idea.test.tmp.dir', "${buildDir}/test-tmp/${task.name}"
    
    task.testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    
    // Ensure cleanup happens before tests run
    task.dependsOn cleanTestTempDirs
}

// Main test task - runs only unit tests
test {
    configureTestTask(it)
    
    // Configure IntelliJ Platform sandbox for unit tests
    systemProperty 'idea.system.path', "${buildDir}/idea-sandbox/system-test"
    systemProperty 'idea.config.path', "${buildDir}/idea-sandbox/config-test"
    systemProperty 'idea.plugins.path', "${buildDir}/idea-sandbox/plugins-test"
    
    // Exclude integration tests to avoid temp directory nesting issues
    exclude '**/*IntegrationTest*.class'
    exclude '**/*Integration.class'
}

// ============================================================================
// INTEGRATION TEST TASKS
// ============================================================================

/**
 * WebDriver Integration Tests
 * 
 * Runs WebDriver-specific integration tests in isolation to prevent
 * temp directory nesting issues with the IntelliJ test framework.
 */
task webDriverIntegrationTest(type: Test) {
    configureTestTask(it)
    
    // Include only WebDriver integration tests
    include '**/*WebDriverErrorStrategyIntegrationTest*.class'
    
    // Use unique sandbox directories to prevent conflicts
    systemProperty 'idea.system.path', "${buildDir}/idea-sandbox/system-webdriver-test"
    systemProperty 'idea.config.path', "${buildDir}/idea-sandbox/config-webdriver-test"
    systemProperty 'idea.plugins.path', "${buildDir}/idea-sandbox/plugins-webdriver-test"
    
    // Force complete isolation
    forkEvery = 1
    maxParallelForks = 1
}

/**
 * Other Integration Tests
 * 
 * Runs all integration tests except WebDriver tests in isolation.
 */
task otherIntegrationTest(type: Test) {
    configureTestTask(it)
    
    // Include all integration tests except WebDriver
    include '**/*IntegrationTest.class'
    include '**/*Integration.class'
    exclude '**/*WebDriverErrorStrategyIntegrationTest*.class'
    
    // Use unique sandbox directories to prevent conflicts
    systemProperty 'idea.system.path', "${buildDir}/idea-sandbox/system-other-test"
    systemProperty 'idea.config.path', "${buildDir}/idea-sandbox/config-other-test"
    systemProperty 'idea.plugins.path', "${buildDir}/idea-sandbox/plugins-other-test"
    
    // Force complete isolation
    forkEvery = 1
    maxParallelForks = 1
}

/**
 * All Integration Tests
 * 
 * Runs all integration tests in separate processes to avoid temp directory issues.
 * This is the recommended way to run integration tests for this project.
 */
task allIntegrationTests {
    dependsOn cleanAll, otherIntegrationTest, webDriverIntegrationTest
    description = 'Run all integration tests in separate processes to avoid temp directory issues'
    group = 'verification'
}

// ============================================================================
// LEGACY TASK SUPPORT (for backward compatibility)
// ============================================================================

/**
 * Legacy integration test task for backward compatibility.
 * @deprecated Use allIntegrationTests instead
 */
task integrationTest(type: Test) {
    configureTestTask(it)
    
    // Include all integration tests
    include '**/*IntegrationTest.class'
    include '**/*Integration.class'
    
    // Use default sandbox
    systemProperty 'idea.system.path', "${buildDir}/idea-sandbox/system-test"
    systemProperty 'idea.config.path', "${buildDir}/idea-sandbox/config-test"
    systemProperty 'idea.plugins.path', "${buildDir}/idea-sandbox/plugins-test"
    
    // Mark as deprecated
    doFirst {
        logger.warn("The 'integrationTest' task is deprecated. Use 'allIntegrationTests' instead.")
    }
}

/**
 * Legacy unit test task for backward compatibility.
 * @deprecated Use 'test' task instead
 */
task unitTest(type: Test) {
    configureTestTask(it)
    
    // Only include pure unit tests (no IntelliJ Platform dependencies)
    include '**/FailureParsingStrategyTest.class'
    include '**/FailureInfoTest.class'
    include '**/PromptFormatterServiceTest.class'
    include '**/ConfigurationErrorStrategyUnitTest.class'
    include '**/JUnitComparisonFailureStrategyUnitTest.class'
    include '**/CucumberErrorStrategyUnitTest.class'
    include '**/RuntimeErrorStrategyUnitTest.class'
    include '**/WebDriverErrorStrategyUnitTest.class'
    
    // Exclude IntelliJ Platform integration tests
    exclude '**/BasePlatformTestCase.class'
    exclude '**/LightPlatformCodeInsightTestCase.class'
    exclude '**/HeavyPlatformTestCase.class'
    exclude '**/IntegrationTest.class'
    
    // Use default sandbox
    systemProperty 'idea.system.path', "${buildDir}/idea-sandbox/system-test"
    systemProperty 'idea.config.path', "${buildDir}/idea-sandbox/config-test"
    systemProperty 'idea.plugins.path', "${buildDir}/idea-sandbox/plugins-test"
    
    // Mark as deprecated
    doFirst {
        logger.warn("The 'unitTest' task is deprecated. Use 'test' task instead.")
    }
}

/**
 * Comprehensive test suite - runs all tests with proper cleanup.
 * This is the recommended way to run all tests for this project.
 */
task runAllTests {
    dependsOn cleanAll, test, allIntegrationTests
    description = 'Run all tests (unit + integration) with proper cleanup to prevent temp directory issues'
    group = 'verification'
    
    doLast {
        logger.lifecycle("All tests completed successfully!")
    }
} 
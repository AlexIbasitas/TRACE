plugins {
    id 'java'
    id 'org.jetbrains.intellij.platform' version '2.9.0'
}




group = 'com.trace'
version = '1.0.1'

// Repositories

repositories {
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
}

// Dependencies

dependencies {
    // IntelliJ Platform dependencies
    intellijPlatform {
        intellijIdeaCommunity('2025.2')
        bundledPlugin('com.intellij.java')
        
        // Plugin verification
        pluginVerifier()
    }
    
    // JSON serialization for backend communication
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // Professional markdown rendering with Flexmark Java - only needed extensions
    implementation 'com.vladsch.flexmark:flexmark:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-tables:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-autolink:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:0.64.8'

    // SQLite JDBC driver for frozen vector store
    implementation('org.xerial:sqlite-jdbc:3.44.1.0') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    // For Gradle task execution
    implementation 'org.jetbrains:annotations:24.0.1'

        
    // JUnit 5 for unit tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    
    // JUnit Vintage Engine for running JUnit 4 tests alongside JUnit 5
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.10.2'
    testImplementation 'junit:junit:4.13.2'
    
    // Testing utilities
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    
    // Required for test framework compatibility
    testImplementation 'org.opentest4j:opentest4j:1.3.0'
    
    testImplementation 'io.cucumber:cucumber-java:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit:7.15.0'
}

// Custom tasks

// Simple task to run the document store refresher
task refreshDocumentStore(type: JavaExec) {
    group = 'document-store'
    description = 'Refresh the document store by parsing documents and generating embeddings'
    
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.trace.ai.tasks.DocumentStoreRefresher'
    
    doFirst {
        // Build arguments from system properties
        List<String> taskArgs = []
        if (System.getProperty('openai.api.key')) {
            taskArgs.add("--openai-key=${System.getProperty('openai.api.key')}")
        }
        if (System.getProperty('gemini.api.key')) {
            taskArgs.add("--gemini-key=${System.getProperty('gemini.api.key')}")
        }
        
        if (taskArgs.isEmpty()) {
            throw new GradleException("No API keys provided! Use -Dopenai.api.key=your_key")
        }
        
        // Set arguments for the JavaExec task
        args = taskArgs
        println "âœ“ Refreshing document store with ${taskArgs.size()} API key(s)"
    }
}

// IntelliJ Platform configuration
intellijPlatform {
    pluginConfiguration {
        name = 'TRACE'
    }
    instrumentCode = true
    
    // Plugin verification will use plugin.xml configuration
}

patchPluginXml {
    sinceBuild = '252'  // 2025.2 (your local installation version)
    untilBuild = '253.*'  // 2025.3 (next stable release)
}

// Configure IDE runtime for professional logging
tasks.named('runIde') {
    // Set logging level to INFO for cleaner output
    jvmArgs '-Didea.log.level=INFO'
    
    // Ensure proper Java version handling
    jvmArgs '-Djava.version=17'
    
    // Configure URL schemes for external links (required for privacy policy links)
    jvmArgs '-Didea.url.schemes=https'
    
    // Lock runtime to JBR 17 to prevent Java version compatibility issues
    // This ensures the sandbox IDE runs on a consistent Java 17 runtime
    environment 'IDEA_JDK', '/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home'
}

// Java configuration

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// Cleanup tasks

/**
 * Clean IntelliJ test temp directories to prevent "file name too long" errors.
 * This is a JetBrains recommended practice for avoiding test infrastructure issues.
 */
task cleanTestTempDirs {
    description = 'Clean IntelliJ test temp directories to prevent file name too long errors'
    group = 'verification'
    
    doLast {
        def tempDir = System.getProperty('java.io.tmpdir')
        if (tempDir) {
            def testTempDirs = new File(tempDir).listFiles(new java.io.FileFilter() {
                boolean accept(File file) {
                    return file.isDirectory() && file.name.startsWith('unitTest__')
                }
            })
            
            if (testTempDirs) {
                logger.lifecycle("Cleaning ${testTempDirs.length} test temp directories...")
                testTempDirs.each { dir ->
                    try {
                        dir.deleteDir()
                        logger.debug("Cleaned temp directory: ${dir.name}")
                    } catch (Exception e) {
                        logger.warn("Failed to clean temp directory ${dir.name}: ${e.message}")
                    }
                }
            } else {
                logger.lifecycle("No test temp directories found to clean")
            }
        }
    }
}


// Test configuration

// Configure test source sets to include only unit tests
sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

/**
 * Common test configuration shared across all test tasks.
 * Includes JetBrains recommended system properties and logging configuration.
 */
def configureTestTask(Test task) {
    // Use JUnit Platform to support both JUnit 5 and JUnit 4 (via Vintage Engine)
    task.useJUnitPlatform()
    
    // JetBrains recommended system properties
    task.systemProperty 'idea.log.debug.categories', 'com.trace'
    task.systemProperty 'idea.split.test.logs', 'true'
    
    // Suppress IntelliJ Platform warnings
    task.systemProperty 'idea.suppress.warnings', 'true'
    task.systemProperty 'java.awt.headless', 'true'
    
    // Additional properties to help with temporary directory issues
    task.systemProperty 'java.io.tmpdir', System.getProperty('java.io.tmpdir')
    
    // Force separate JVM processes for better isolation (JetBrains recommendation)
    task.forkEvery = 1
    task.maxParallelForks = 1
    
    // Suppress verbose JVM warnings for cleaner output
    task.jvmArgs '-Xlog:cds=error'  // Suppress CDS warnings
    
    // Use shorter temp directory paths to prevent "file name too long" errors
    task.systemProperty 'idea.test.tmp.dir', "${buildDir}/test-tmp/${task.name}"
    
    task.testLogging {
        // Only show failures and summary - much cleaner output
        events "failed"
        exceptionFormat = 'short'
        showStandardStreams = false
        showExceptions = true
        showCauses = true
        showStackTraces = true
        
        // Show only test class level results
        displayGranularity = 2
    }
    
    // Ensure cleanup happens before tests run
    task.dependsOn cleanTestTempDirs
}

// Main test task - runs JUnit 5 unit tests
test {
    configureTestTask(it)
    
    // Explicitly set test source directory
    testClassesDirs = files(sourceSets.test.output.classesDirs)
    
    // Include only JUnit 5 unit tests from src/test/java
    include '**/*UnitTest.class'
    include '**/*Test.class'
    
    // Exclude example/template files
    exclude '**/examples/**'
    
    // Force test discovery
    scanForTestClasses = true
    
    // Force test execution (prevent caching)
    outputs.upToDateWhen { false }
}